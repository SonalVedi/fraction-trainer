<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/panels/Practice.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/panels/Practice.tsx" />
              <option name="originalContent" value="import React, { useEffect, useRef, useState } from &quot;react&quot;;&#10;import { Settings, PBs, Question, Fraction, Operation } from &quot;../types&quot;;&#10;import { generateQuestion } from &quot;../utils/random&quot;;&#10;import { equalFrac, toPretty, simplify } from &quot;../utils/fraction&quot;;&#10;import { parseAnswer } from &quot;../utils/parse&quot;;&#10;import { loadPBs, savePBs } from &quot;../utils/persist&quot;;&#10;import { CardBox } from &quot;../components/CardBox&quot;;&#10;import { Stat } from &quot;../components/Stat&quot;;&#10;import { FractionText } from &quot;../components/FractionText&quot;;&#10;import { Pill } from &quot;../components/Pill&quot;;&#10;import { AnimatePresence, motion } from &quot;framer-motion&quot;;&#10;&#10;export function Practice({ settings, resetToken }: { settings: Settings; resetToken: number }) {&#10;  const [q, setQ] = useState&lt;Question&gt;(() =&gt; generateQuestion(settings));&#10;  const [input, setInput] = useState(&quot;&quot;);&#10;  const [result, setResult] = useState&lt;null | { correct: boolean; user: Fraction }&gt;(null);&#10;  const [count, setCount] = useState(0);&#10;  const [correct, setCorrect] = useState(0);&#10;  const [lastTime, setLastTime] = useState&lt;number | null&gt;(null);&#10;  const [showSteps, setShowSteps] = useState(false);&#10;  const [steps, setSteps] = useState&lt;React.ReactNode[]&gt;([]);&#10;  const [streak, setStreak] = useState(0);&#10;  const [pbs, setPBs] = useState&lt;PBs&gt;(() =&gt; loadPBs());&#10;  const startRef = useRef&lt;number&gt;(performance.now());&#10;  const inputRef = useRef&lt;HTMLInputElement&gt;(null);&#10;&#10;  useEffect(() =&gt; { inputRef.current?.focus(); }, [q]);&#10;&#10;  useEffect(() =&gt; {&#10;    setCount(0);&#10;    setCorrect(0);&#10;    setLastTime(null);&#10;    setShowSteps(false);&#10;    setSteps([]);&#10;    setStreak(0);&#10;    setPBs({});&#10;    try { savePBs({}); } catch {}&#10;  }, [resetToken]);&#10;&#10;  function submit() {&#10;    const parsed = parseAnswer(input);&#10;    if (!parsed) return;&#10;    const ok = equalFrac(parsed, q.answer);&#10;    setResult({ correct: ok, user: parsed });&#10;    const now = performance.now();&#10;    const secs = (now - startRef.current) / 1000;&#10;    setLastTime(secs);&#10;    setCount((c) =&gt; c + 1);&#10;    setCorrect((c) =&gt; c + (ok ? 1 : 0));&#10;    setShowSteps(false);&#10;    setSteps(explainSteps(q.a, q.b, q.op));&#10;    const nextStreak = ok ? streak + 1 : 0;&#10;    setStreak(nextStreak);&#10;    const nextPBs: PBs = { ...pbs };&#10;    if (!pbs.bestStreak || nextStreak &gt; pbs.bestStreak) nextPBs.bestStreak = nextStreak;&#10;    if (!pbs.bestTimeSec || secs &lt; pbs.bestTimeSec) nextPBs.bestTimeSec = secs;&#10;    setPBs(nextPBs);&#10;    savePBs(nextPBs);&#10;  }&#10;&#10;  function nextQuestion() {&#10;    setQ(generateQuestion(settings));&#10;    setInput(&quot;&quot;);&#10;    setResult(null);&#10;    setShowSteps(false);&#10;    setSteps([]);&#10;    startRef.current = performance.now();&#10;    inputRef.current?.focus();&#10;  }&#10;&#10;  useEffect(() =&gt; {&#10;    function onKey(e: KeyboardEvent) {&#10;      if (e.key === &quot;Enter&quot;) submit();&#10;      if (e.key.toLowerCase() === &quot;n&quot;) nextQuestion();&#10;      if (e.key.toLowerCase() === &quot;s&quot; &amp;&amp; result) setShowSteps((v) =&gt; !v);&#10;    }&#10;    window.addEventListener(&quot;keydown&quot;, onKey);&#10;    return () =&gt; window.removeEventListener(&quot;keydown&quot;, onKey);&#10;  });&#10;&#10;  const accuracy = count ? Math.round((100 * correct) / count) : 0;&#10;&#10;  return (&#10;    &lt;div className=&quot;mt-6 grid md:grid-cols-[1fr,320px] gap-6&quot;&gt;&#10;      &lt;CardBox&gt;&#10;        &lt;div className=&quot;text-sm text-gray-500&quot;&gt;Solve the problem. You can enter integers, fractions, or mixed numbers (e.g., 1 3/4, -2).&lt;/div&gt;&#10;        &lt;div className=&quot;mt-4 text-3xl font-semibold flex items-center gap-4&quot;&gt;&#10;          &lt;FractionText f={q.a} /&gt;&#10;          &lt;span&gt;{q.op}&lt;/span&gt;&#10;          &lt;FractionText f={q.b} /&gt;&#10;          &lt;span&gt;=&lt;/span&gt;&#10;          &lt;input&#10;            ref={inputRef}&#10;            value={input}&#10;            onChange={(e) =&gt; setInput(e.target.value)}&#10;            onKeyDown={(e) =&gt; {&#10;              // Allow: numbers, /, -, navigation, backspace, delete, enter, tab&#10;              if (&#10;                !(&#10;                  (e.key &gt;= '0' &amp;&amp; e.key &lt;= '9') ||&#10;                  e.key === '/' ||&#10;                  e.key === '-' ||&#10;                  e.key === 'Backspace' ||&#10;                  e.key === 'Delete' ||&#10;                  e.key === 'ArrowLeft' ||&#10;                  e.key === 'ArrowRight' ||&#10;                  e.key === 'ArrowUp' ||&#10;                  e.key === 'ArrowDown' ||&#10;                  e.key === 'Tab' ||&#10;                  e.key === 'Enter' ||&#10;                  e.ctrlKey ||&#10;                  e.metaKey&#10;                )&#10;              ) {&#10;                e.preventDefault();&#10;              }&#10;            }}&#10;            placeholder=&quot;e.g., 3/4 or 1 1/2 or -2&quot;&#10;            className=&quot;text-xl border rounded-lg px-3 py-2 w-56 focus:outline-none focus:ring-2 focus:ring-black/20&quot;&#10;            aria-label=&quot;Your answer&quot;&#10;          /&gt;&#10;        &lt;/div&gt;&#10;        &lt;div className=&quot;mt-4 flex gap-2&quot;&gt;&#10;          &lt;button onClick={submit} className=&quot;px-4 py-2 rounded-xl bg-black text-white&quot; aria-keyshortcuts=&quot;Enter&quot;&gt;Check&lt;/button&gt;&#10;          &lt;button onClick={nextQuestion} className=&quot;px-4 py-2 rounded-xl border&quot; aria-keyshortcuts=&quot;N&quot;&gt;Next&lt;/button&gt;&#10;          {result &amp;&amp; &lt;button onClick={() =&gt; setShowSteps((v) =&gt; !v)} className=&quot;px-4 py-2 rounded-xl border&quot; aria-keyshortcuts=&quot;S&quot;&gt;{showSteps ? &quot;Hide steps&quot; : &quot;Show steps&quot;}&lt;/button&gt;}&#10;        &lt;/div&gt;&#10;&#10;        &lt;AnimatePresence&gt;&#10;          {result &amp;&amp; (&#10;            &lt;motion.div initial={{ opacity: 0, y: -4 }} animate={{ opacity: 1, y: 0 }} exit={{ opacity: 0, y: -4 }} className=&quot;mt-4&quot;&gt;&#10;              {result.correct ? (&#10;                &lt;div className=&quot;p-3 rounded-xl bg-green-50 border border-green-200&quot;&gt;✅ Correct!&lt;/div&gt;&#10;              ) : (&#10;                &lt;div className=&quot;p-3 rounded-xl bg-red-50 border border-red-200&quot;&gt;&#10;                  ❌ Not quite. Correct answer is &lt;span className=&quot;font-semibold&quot;&gt;{toPretty(q.answer)}&lt;/span&gt;&#10;                &lt;/div&gt;&#10;              )}&#10;              {lastTime != null &amp;&amp; (&#10;                &lt;div className=&quot;mt-2 text-sm text-gray-600&quot;&gt;Time: {lastTime.toFixed(1)}s&lt;/div&gt;&#10;              )}&#10;              {showSteps &amp;&amp; steps.length &gt; 0 &amp;&amp; (&#10;                &lt;div className=&quot;mt-3 p-3 rounded-xl bg-gray-50 border text-sm leading-relaxed&quot;&gt;&#10;                  &lt;div className=&quot;font-semibold mb-1&quot;&gt;Steps&lt;/div&gt;&#10;                  &lt;ol className=&quot;list-decimal pl-5 space-y-1&quot;&gt;&#10;                    {steps.map((s, i) =&gt; &lt;li key={i}&gt;{s}&lt;/li&gt;)}&#10;                  &lt;/ol&gt;&#10;                &lt;/div&gt;&#10;              )}&#10;            &lt;/motion.div&gt;&#10;          )}&#10;        &lt;/AnimatePresence&gt;&#10;      &lt;/CardBox&gt;&#10;&#10;      &lt;aside className=&quot;flex flex-col gap-3&quot;&gt;&#10;        &lt;Stat label=&quot;Answered&quot; value={count} /&gt;&#10;        &lt;Stat label=&quot;Correct&quot; value={`${correct}`} /&gt;&#10;        &lt;Stat label=&quot;Accuracy&quot; value={`${accuracy}%`} /&gt;&#10;        {lastTime != null &amp;&amp; &lt;Stat label=&quot;Last time&quot; value={`${lastTime.toFixed(1)}s`} /&gt;}&#10;        &lt;Stat label=&quot;Streak&quot; value={streak} /&gt;&#10;        {pbs.bestStreak != null &amp;&amp; &lt;Stat label=&quot;Best Streak&quot; value={pbs.bestStreak} /&gt;}&#10;        {pbs.bestTimeSec != null &amp;&amp; &lt;Stat label=&quot;Best Time/Q&quot; value={`${pbs.bestTimeSec.toFixed(2)}s`} /&gt;}&#10;      &lt;/aside&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;&#10;export function explainSteps(a: Fraction, b: Fraction, op: Operation): React.ReactNode[] {&#10;  const lines: React.ReactNode[] = [];&#10;  const sa = simplify(a.n, a.d); const sb = simplify(b.n, b.d);&#10;  const Frac = ({ f }: { f: Fraction }) =&gt; &lt;FractionText f={f} className=&quot;inline-flex align-middle&quot; /&gt;;&#10;&#10;  if (op === &quot;×&quot;) {&#10;    const prod = { n: sa.n * sb.n, d: sa.d * sb.d };&#10;    const simp = simplify(prod.n, prod.d);&#10;    lines.push(&lt;span key=&quot;mul-msg&quot;&gt;Multiply numerator by numerator and denominator by denominator.&lt;/span&gt;);&#10;    lines.push(&#10;      &lt;span key=&quot;mul-eq&quot; className=&quot;inline-flex items-center gap-2&quot;&gt;&#10;        &lt;Frac f={sa} /&gt; &lt;span&gt;×&lt;/span&gt; &lt;Frac f={sb} /&gt; &lt;span&gt;=&lt;/span&gt; &lt;Frac f={prod} /&gt;&#10;      &lt;/span&gt;&#10;    );&#10;    if (simp.n !== prod.n || simp.d !== prod.d) {&#10;      lines.push(&#10;        &lt;span key=&quot;mul-simp&quot; className=&quot;inline-flex items-center gap-2&quot;&gt;&#10;          &lt;span&gt;Simplify:&lt;/span&gt; &lt;Frac f={prod} /&gt; &lt;span&gt;→&lt;/span&gt; &lt;Frac f={simp} /&gt;&#10;        &lt;/span&gt;&#10;      );&#10;    }&#10;  } else {&#10;    const rec = { n: sb.d, d: sb.n };&#10;    const prod = { n: sa.n * rec.n, d: sa.d * rec.d };&#10;    const simp = simplify(prod.n, prod.d);&#10;    lines.push(&#10;      &lt;span key=&quot;div-recip&quot; className=&quot;inline-flex items-center gap-2&quot;&gt;&#10;        &lt;span&gt;Division is multiply by reciprocal:&lt;/span&gt; &lt;Frac f={sa} /&gt; &lt;span&gt;÷&lt;/span&gt; &lt;Frac f={sb} /&gt; &lt;span&gt;=&lt;/span&gt; &lt;Frac f={sa} /&gt; &lt;span&gt;×&lt;/span&gt; &lt;Frac f={rec} /&gt;&#10;      &lt;/span&gt;&#10;    );&#10;    lines.push(&lt;span key=&quot;div-mul-msg&quot;&gt;Now multiply numerator by numerator and denominator by denominator.&lt;/span&gt;);&#10;    lines.push(&#10;      &lt;span key=&quot;div-eq&quot; className=&quot;inline-flex items-center gap-2&quot;&gt;&#10;        &lt;Frac f={sa} /&gt; &lt;span&gt;×&lt;/span&gt; &lt;Frac f={rec} /&gt; &lt;span&gt;=&lt;/span&gt; &lt;Frac f={prod} /&gt;&#10;      &lt;/span&gt;&#10;    );&#10;    if (simp.n !== prod.n || simp.d !== prod.d) {&#10;      lines.push(&#10;        &lt;span key=&quot;div-simp&quot; className=&quot;inline-flex items-center gap-2&quot;&gt;&#10;          &lt;span&gt;Simplify:&lt;/span&gt; &lt;Frac f={prod} /&gt; &lt;span&gt;→&lt;/span&gt; &lt;Frac f={simp} /&gt;&#10;        &lt;/span&gt;&#10;      );&#10;    }&#10;  }&#10;  return lines;&#10;}&#10;" />
              <option name="updatedContent" value="import React, { useEffect, useRef, useState } from &quot;react&quot;;&#10;import { Settings, PBs, Question, Fraction, Operation } from &quot;../types&quot;;&#10;import { generateQuestion } from &quot;../utils/random&quot;;&#10;import { equalFrac, toPretty, simplify } from &quot;../utils/fraction&quot;;&#10;import { parseAnswer } from &quot;../utils/parse&quot;;&#10;import { loadPBs, savePBs } from &quot;../utils/persist&quot;;&#10;import { CardBox } from &quot;../components/CardBox&quot;;&#10;import { Stat } from &quot;../components/Stat&quot;;&#10;import { FractionText } from &quot;../components/FractionText&quot;;&#10;import { Pill } from &quot;../components/Pill&quot;;&#10;import { AnimatePresence, motion } from &quot;framer-motion&quot;;&#10;&#10;export function Practice({ settings, resetToken }: { settings: Settings; resetToken: number }) {&#10;  const [q, setQ] = useState&lt;Question&gt;(() =&gt; generateQuestion(settings));&#10;  const [input, setInput] = useState(&quot;&quot;);&#10;  const [result, setResult] = useState&lt;null | { correct: boolean; user: Fraction }&gt;(null);&#10;  const [count, setCount] = useState(0);&#10;  const [correct, setCorrect] = useState(0);&#10;  const [lastTime, setLastTime] = useState&lt;number | null&gt;(null);&#10;  const [showSteps, setShowSteps] = useState(false);&#10;  const [steps, setSteps] = useState&lt;React.ReactNode[]&gt;([]);&#10;  const [streak, setStreak] = useState(0);&#10;  const [pbs, setPBs] = useState&lt;PBs&gt;(() =&gt; loadPBs());&#10;  const startRef = useRef&lt;number&gt;(performance.now());&#10;  const inputRef = useRef&lt;HTMLInputElement&gt;(null);&#10;&#10;  useEffect(() =&gt; { inputRef.current?.focus(); }, [q]);&#10;&#10;  useEffect(() =&gt; {&#10;    setCount(0);&#10;    setCorrect(0);&#10;    setLastTime(null);&#10;    setShowSteps(false);&#10;    setSteps([]);&#10;    setStreak(0);&#10;    setPBs({});&#10;    try { savePBs({}); } catch {}&#10;  }, [resetToken]);&#10;&#10;  function submit() {&#10;    const parsed = parseAnswer(input);&#10;    if (!parsed) return;&#10;    const ok = equalFrac(parsed, q.answer);&#10;    setResult({ correct: ok, user: parsed });&#10;    const now = performance.now();&#10;    const secs = (now - startRef.current) / 1000;&#10;    setLastTime(secs);&#10;    setCount((c) =&gt; c + 1);&#10;    setCorrect((c) =&gt; c + (ok ? 1 : 0));&#10;    setShowSteps(false);&#10;    setSteps(explainSteps(q.a, q.b, q.op));&#10;    const nextStreak = ok ? streak + 1 : 0;&#10;    setStreak(nextStreak);&#10;    const nextPBs: PBs = { ...pbs };&#10;    if (!pbs.bestStreak || nextStreak &gt; pbs.bestStreak) nextPBs.bestStreak = nextStreak;&#10;    if (!pbs.bestTimeSec || secs &lt; pbs.bestTimeSec) nextPBs.bestTimeSec = secs;&#10;    setPBs(nextPBs);&#10;    savePBs(nextPBs);&#10;  }&#10;&#10;  function nextQuestion() {&#10;    setQ(generateQuestion(settings));&#10;    setInput(&quot;&quot;);&#10;    setResult(null);&#10;    setShowSteps(false);&#10;    setSteps([]);&#10;    startRef.current = performance.now();&#10;    inputRef.current?.focus();&#10;  }&#10;&#10;  useEffect(() =&gt; {&#10;    function onKey(e: KeyboardEvent) {&#10;      if (e.key === &quot;Enter&quot;) submit();&#10;      if (e.key.toLowerCase() === &quot;n&quot;) nextQuestion();&#10;      if (e.key.toLowerCase() === &quot;s&quot; &amp;&amp; result) setShowSteps((v) =&gt; !v);&#10;    }&#10;    window.addEventListener(&quot;keydown&quot;, onKey);&#10;    return () =&gt; window.removeEventListener(&quot;keydown&quot;, onKey);&#10;  });&#10;&#10;  const accuracy = count ? Math.round((100 * correct) / count) : 0;&#10;&#10;  return (&#10;    &lt;div className=&quot;mt-6 grid md:grid-cols-[1fr,320px] gap-6&quot;&gt;&#10;      &lt;CardBox&gt;&#10;        &lt;div className=&quot;text-sm text-gray-500&quot;&gt;Solve the problem. You can enter integers, fractions, or mixed numbers (e.g., 1 3/4, -2).&lt;/div&gt;&#10;        &lt;div className=&quot;mt-4 text-3xl font-semibold flex items-center gap-4&quot;&gt;&#10;          &lt;FractionText f={q.a} /&gt;&#10;          &lt;span&gt;{q.op}&lt;/span&gt;&#10;          &lt;FractionText f={q.b} /&gt;&#10;          &lt;span&gt;=&lt;/span&gt;&#10;          &lt;input&#10;            ref={inputRef}&#10;            value={input}&#10;            onChange={(e) =&gt; setInput(e.target.value)}&#10;            onKeyDown={(e) =&gt; {&#10;              // Allow: numbers, /, -, navigation, backspace, delete, enter, tab&#10;              if (&#10;                !(&#10;                  (e.key &gt;= '0' &amp;&amp; e.key &lt;= '9') ||&#10;                  e.key === '/' ||&#10;                  e.key === '-' ||&#10;                  e.key === 'Backspace' ||&#10;                  e.key === 'Delete' ||&#10;                  e.key === 'ArrowLeft' ||&#10;                  e.key === 'ArrowRight' ||&#10;                  e.key === 'ArrowUp' ||&#10;                  e.key === 'ArrowDown' ||&#10;                  e.key === 'Tab' ||&#10;                  e.key === 'Enter' ||&#10;                  e.ctrlKey ||&#10;                  e.metaKey&#10;                )&#10;              ) {&#10;                e.preventDefault();&#10;              }&#10;            }}&#10;            placeholder=&quot;e.g., 3/4 or 1 1/2 or -2&quot;&#10;            className=&quot;text-xl border rounded-lg px-3 py-2 w-56 focus:outline-none focus:ring-2 focus:ring-black/20&quot;&#10;            aria-label=&quot;Your answer&quot;&#10;          /&gt;&#10;        &lt;/div&gt;&#10;        &lt;div className=&quot;mt-4 flex gap-2&quot;&gt;&#10;          &lt;button onClick={submit} className=&quot;px-4 py-2 rounded-xl bg-black text-white&quot; aria-keyshortcuts=&quot;Enter&quot;&gt;Check&lt;/button&gt;&#10;          &lt;button onClick={nextQuestion} className=&quot;px-4 py-2 rounded-xl border&quot; aria-keyshortcuts=&quot;N&quot;&gt;Next&lt;/button&gt;&#10;          {result &amp;&amp; &lt;button onClick={() =&gt; setShowSteps((v) =&gt; !v)} className=&quot;px-4 py-2 rounded-xl border&quot; aria-keyshortcuts=&quot;S&quot;&gt;{showSteps ? &quot;Hide steps&quot; : &quot;Show steps&quot;}&lt;/button&gt;}&#10;        &lt;/div&gt;&#10;&#10;        &lt;AnimatePresence&gt;&#10;          {result &amp;&amp; (&#10;            &lt;motion.div initial={{ opacity: 0, y: -4 }} animate={{ opacity: 1, y: 0 }} exit={{ opacity: 0, y: -4 }} className=&quot;mt-4&quot;&gt;&#10;              {result.correct ? (&#10;                &lt;div className=&quot;p-3 rounded-xl bg-green-50 border border-green-200&quot;&gt;✅ Correct!&lt;/div&gt;&#10;              ) : (&#10;                &lt;div className=&quot;p-3 rounded-xl bg-red-50 border border-red-200&quot;&gt;&#10;                  ❌ Not quite. Correct answer is &lt;span className=&quot;font-semibold&quot;&gt;{toPretty(q.answer)}&lt;/span&gt;&#10;                &lt;/div&gt;&#10;              )}&#10;              {lastTime != null &amp;&amp; (&#10;                &lt;div className=&quot;mt-2 text-sm text-gray-600&quot;&gt;Time: {lastTime.toFixed(1)}s&lt;/div&gt;&#10;              )}&#10;              {showSteps &amp;&amp; steps.length &gt; 0 &amp;&amp; (&#10;                &lt;div className=&quot;mt-3 p-3 rounded-xl bg-gray-50 border text-sm leading-relaxed&quot;&gt;&#10;                  &lt;div className=&quot;font-semibold mb-1&quot;&gt;Steps&lt;/div&gt;&#10;                  &lt;ol className=&quot;list-decimal pl-5 space-y-1&quot;&gt;&#10;                    {steps.map((s, i) =&gt; &lt;li key={i}&gt;{s}&lt;/li&gt;)}&#10;                  &lt;/ol&gt;&#10;                &lt;/div&gt;&#10;              )}&#10;            &lt;/motion.div&gt;&#10;          )}&#10;        &lt;/AnimatePresence&gt;&#10;      &lt;/CardBox&gt;&#10;&#10;      &lt;aside className=&quot;flex flex-col gap-3&quot;&gt;&#10;        &lt;Stat label=&quot;Answered&quot; value={count} /&gt;&#10;        &lt;Stat label=&quot;Correct&quot; value={`${correct}`} /&gt;&#10;        &lt;Stat label=&quot;Accuracy&quot; value={`${accuracy}%`} /&gt;&#10;        {lastTime != null &amp;&amp; &lt;Stat label=&quot;Last time&quot; value={`${lastTime.toFixed(1)}s`} /&gt;}&#10;        &lt;Stat label=&quot;Streak&quot; value={streak} /&gt;&#10;        {pbs.bestStreak != null &amp;&amp; &lt;Stat label=&quot;Best Streak&quot; value={pbs.bestStreak} /&gt;}&#10;        {pbs.bestTimeSec != null &amp;&amp; &lt;Stat label=&quot;Best Time/Q&quot; value={`${pbs.bestTimeSec.toFixed(2)}s`} /&gt;}&#10;      &lt;/aside&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;&#10;export function explainSteps(a: Fraction, b: Fraction, op: Operation): React.ReactNode[] {&#10;  const lines: React.ReactNode[] = [];&#10;  const sa = simplify(a.n, a.d); const sb = simplify(b.n, b.d);&#10;  const Frac = ({ f }: { f: Fraction }) =&gt; &lt;FractionText f={f} className=&quot;inline-flex align-middle&quot; /&gt;;&#10;&#10;  if (op === &quot;×&quot;) {&#10;    const prod = { n: sa.n * sb.n, d: sa.d * sb.d };&#10;    const simp = simplify(prod.n, prod.d);&#10;    lines.push(&lt;span key=&quot;mul-msg&quot;&gt;Multiply numerator by numerator and denominator by denominator.&lt;/span&gt;);&#10;    lines.push(&#10;      &lt;span key=&quot;mul-eq&quot; className=&quot;inline-flex items-center gap-2&quot;&gt;&#10;        &lt;Frac f={sa} /&gt; &lt;span&gt;×&lt;/span&gt; &lt;Frac f={sb} /&gt; &lt;span&gt;=&lt;/span&gt; &lt;Frac f={prod} /&gt;&#10;      &lt;/span&gt;&#10;    );&#10;    if (simp.n !== prod.n || simp.d !== prod.d) {&#10;      lines.push(&#10;        &lt;span key=&quot;mul-simp&quot; className=&quot;inline-flex items-center gap-2&quot;&gt;&#10;          &lt;span&gt;Simplify:&lt;/span&gt; &lt;Frac f={prod} /&gt; &lt;span&gt;→&lt;/span&gt; &lt;Frac f={simp} /&gt;&#10;        &lt;/span&gt;&#10;      );&#10;    }&#10;  } else {&#10;    const rec = { n: sb.d, d: sb.n };&#10;    const prod = { n: sa.n * rec.n, d: sa.d * rec.d };&#10;    const simp = simplify(prod.n, prod.d);&#10;    lines.push(&#10;      &lt;span key=&quot;div-recip&quot; className=&quot;inline-flex items-center gap-2&quot;&gt;&#10;        &lt;span&gt;Division is multiply by reciprocal:&lt;/span&gt; &lt;Frac f={sa} /&gt; &lt;span&gt;÷&lt;/span&gt; &lt;Frac f={sb} /&gt; &lt;span&gt;=&lt;/span&gt; &lt;Frac f={sa} /&gt; &lt;span&gt;×&lt;/span&gt; &lt;Frac f={rec} /&gt;&#10;      &lt;/span&gt;&#10;    );&#10;    lines.push(&lt;span key=&quot;div-mul-msg&quot;&gt;Now multiply numerator by numerator and denominator by denominator.&lt;/span&gt;);&#10;    lines.push(&#10;      &lt;span key=&quot;div-eq&quot; className=&quot;inline-flex items-center gap-2&quot;&gt;&#10;        &lt;Frac f={sa} /&gt; &lt;span&gt;×&lt;/span&gt; &lt;Frac f={rec} /&gt; &lt;span&gt;=&lt;/span&gt; &lt;Frac f={prod} /&gt;&#10;      &lt;/span&gt;&#10;    );&#10;    if (simp.n !== prod.n || simp.d !== prod.d) {&#10;      lines.push(&#10;        &lt;span key=&quot;div-simp&quot; className=&quot;inline-flex items-center gap-2&quot;&gt;&#10;          &lt;span&gt;Simplify:&lt;/span&gt; &lt;Frac f={prod} /&gt; &lt;span&gt;→&lt;/span&gt; &lt;Frac f={simp} /&gt;&#10;        &lt;/span&gt;&#10;      );&#10;    }&#10;  }&#10;  return lines;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>